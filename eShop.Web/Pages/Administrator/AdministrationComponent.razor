@page "/administration"
@attribute [Authorize(Roles = "Administrators,Helpdesk")]
@inject UserManager<IdentityUser> _userManager
@inject RoleManager<IdentityRole> _roleManager
@inject AuthenticationStateProvider authenticationStateProvider
<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE) || (@context.User.IsInRole(HELPDESK_ROLE)))
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">Id</th>
                            <th scope="col">User Name</th>
                            <th scope="col">Email</th>                           
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in users)
                        {
                        <tr>
                            <td scope="row">@user.Id.Substring(0, 5) ...</td>
                            <td scope="row">@user.UserName</td>
                            <td scope="row">@user.Email</td>                           
                            <td scope="row">
                                <!-- Edit the current forecast -->
                                <button class="btn btn-primary" @onclick="(() => EditUser(user))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Create or Edit User</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current user -->
                            <div class="modal-body">
                                <!-- Only show Id if not a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                <!-- Only allow edit if a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text" placeholder="UserName" @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text" @bind="objUser.Email" />
                                <input class="form-control" type="password" @bind="objUser.PasswordHash" />
                                <select class="form-control" @bind="@CurrentUserRole">
                                    @foreach (var role in roles)
                                    {
                                        <option value="@role">
                                            @role
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <!-- Button to save the user -->
                                <button class="btn btn-primary"@onclick="SaveUser">
                                    Save
                                </button>
                                <!-- Only show delete button if not a new record -->
                                @if (objUser.Id != "")
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger" @onclick="DeleteUser">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
        }
        else
        {
            <p class="alert-danger">You're not signed in as a user in @ADMINISTRATION_ROLE.<b>GRAND ACCESS DENIED</b> </p>
        }
    </Authorized>
    <NotAuthorized>
        <p class="alert"><b>You're not loggged in.</b></p>
    </NotAuthorized>
</AuthorizeView>

@code {
    // Add administrator Role on the first time page load
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    string HELPDESK_ROLE = "Helpdesk";
    ClaimsPrincipal currentUser;
    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var administratorRoleResult = await _roleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        var helpDeskRoleResult = await _roleManager.FindByNameAsync(HELPDESK_ROLE);

        if (administratorRoleResult == null )
        {
            // Create ADMINISTRATION_ROLE  Role
            await _roleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        if (helpDeskRoleResult == null)
        {
            // Create HELPDESK_ROLE Role          
            await _roleManager.CreateAsync(new IdentityRole(HELPDESK_ROLE));
        }
        // Ensure a adminUser named Admin@admin.com is an Administrator
        var adminUser = await _userManager.FindByNameAsync("Admin@admin.com");
        // Ensure a helpdeskUser named helpdeskadmin@admin.com is an Helpdesk Admin
        var helpdeskUser = await _userManager.FindByNameAsync("helpdeskadmin@admin.com");
      
        if (adminUser != null )
        {
            // Is Admin@admin.com in administrator role?
            var adminUserResult = await _userManager.IsInRoleAsync(adminUser, ADMINISTRATION_ROLE);
            if (!adminUserResult)
            {
                // Put admin in Administrator role
                await _userManager.AddToRoleAsync(adminUser, ADMINISTRATION_ROLE);
            }
        }
        if (helpdeskUser != null)
        {
            // Is helpdeskadmin@admin.com in administrator role?
            var helpdeskUserResult = await _userManager.IsInRoleAsync(helpdeskUser, HELPDESK_ROLE);
            if (!helpdeskUserResult)
            {
                // Put admin in Administrator role
                await _userManager.AddToRoleAsync(helpdeskUser, HELPDESK_ROLE);
            }
        }
        // Get the current logged in user
        currentUser = (await authenticationStateTask).User;

        // Get the Users
        GetUsers();
    }

    // User Administration 

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    // Collection to display the existing users
    List<IdentityUser> users = new List<IdentityUser>();
    // Options to display in the roles dropdown when editing a user
    List<string> roles = new List<string>() { "Users", "Administrators" , "Helpdesk" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;

    // add GetUsers method to display the existing users.
    public void GetUsers()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        users = new List<IdentityUser>();
        // get users from _UserManager
        var usersInfo = _userManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"          
        });
        foreach (var user in usersInfo)
        {
            users.Add(user);
        }
    }

    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _userManager.FindByIdAsync(objUser.Id);
                // Update Email
                user.Email = objUser.Email;
                // Update the user
                await _userManager.UpdateAsync(user);
                // Only update password if the current value is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken = await _userManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser = await _userManager.ResetPasswordAsync( user,resetToken,objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError = passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        // Keep the popup opened
                        return;
                    }
                }
                // Handle Roles
                // Is user in administrator role?
                var adminUserResult = await _userManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

                // Is user in HelpDeskadmin role?
                var helpdeskUserResult = await _userManager.IsInRoleAsync(user, HELPDESK_ROLE);


                // Is Administrator role selected but user is not an Administrator?
                if ((CurrentUserRole == ADMINISTRATION_ROLE) && (!adminUserResult))
                {
                    // Put admin in Administrator role
                    await _userManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                } else if ((CurrentUserRole == HELPDESK_ROLE) && (!helpdeskUserResult))
                {
                    // Put helpdeskadmin in HELPDESK role
                    await _userManager.AddToRoleAsync(user, HELPDESK_ROLE);
                }
                else
                {
                    // Is Administrator role not selected but user is an Administrator?
                    if ((CurrentUserRole != ADMINISTRATION_ROLE) && (adminUserResult))
                    {
                        // Remove user from Administrator role
                        await _userManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                    // Is helpdesk role not selected but user is an HelpdeskAdmin?
                    if ((CurrentUserRole != HELPDESK_ROLE) && (helpdeskUserResult))
                    {
                        // Remove user from Helpdeskadmin role
                        await _userManager.RemoveFromRoleAsync(user, HELPDESK_ROLE);
                    }
                }
            }
            else
            {
                // Insert new user
                var NewUser = new IdentityUser{UserName = objUser.UserName,Email = objUser.Email};
                var CreateResult = await _userManager.CreateAsync(NewUser, objUser.PasswordHash);
                // if result is not succeeded , then display error message 
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        // Put admin in Administrator role
                        await _userManager.AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                    if (CurrentUserRole == HELPDESK_ROLE)
                    {
                        // Put admin in Administrator role
                        await _userManager.AddToRoleAsync(NewUser, HELPDESK_ROLE);
                    }
                }
            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {
        // Set the selected user as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _userManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var adminUserResult = await _userManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (adminUserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            var helpdeskUserResult = await _userManager.IsInRoleAsync(user, HELPDESK_ROLE);
            if (helpdeskUserResult)
            {
                CurrentUserRole = HELPDESK_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var user = await _userManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _userManager.DeleteAsync(user);
        }
        // Refresh Users
        GetUsers();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
}